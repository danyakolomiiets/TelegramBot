import os
import re
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ChatMemberUpdated
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
BANNED_WORDS = ["–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ä–∞–±–æ—Ç–∞", "–∫–æ–º–∞–Ω–¥–∞"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —ç–º–æ–¥–∂–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
def count_emojis(text):
    emoji_pattern = re.compile(r'[\U0001F300-\U0001F6FF\U0001F900-\U0001F9FF\U0001F680-\U0001F6C0\U0001F1E0-\U0001F1FF]+', flags=re.UNICODE)
    return len(emoji_pattern.findall(text))

@dp.message_handler()
async def check_messages(message: types.Message):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ """
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    chat_member = await bot.get_chat_member(chat_id, user_id)
    messages_count = chat_member.user.id  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (–∞–π–¥–∏ —á–ª–µ–Ω–∞ —á–∞—Ç–∞)

    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–ø–∏—Å–∞–ª –º–µ–Ω—å—à–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—Ç–æ–ø-—Å–ª–æ–≤–æ ‚Äî –±–∞–Ω
    if messages_count < 5 and any(word in message.text.lower() for word in BANNED_WORDS):
        try:
            await bot.kick_chat_member(chat_id, user_id)
            await message.reply(f"üî® {message.from_user.first_name} —è —Ç–µ –¥–∞–º –±–ª—è—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫.")
        except Exception as e:
            await message.reply(f"‚ö† –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
