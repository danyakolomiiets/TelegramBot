import os
import re
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatPermissions
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –≤–µ–±—Ö—É–∫ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –£–∫–∞–∂–∏ —ç—Ç–æ—Ç URL –≤ Render

if not TOKEN or not WEBHOOK_URL:
    raise ValueError("üö® –û—à–∏–±–∫–∞! TOKEN –∏–ª–∏ WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render!")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîπ –°–æ–∑–¥–∞–µ–º Aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = web.Application()

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –≤ aiogram
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/")
setup_application(app, dp, bot=bot)

# üîπ –•—Ä–∞–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = {}

# üîπ –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –ª–∏–º–∏—Ç —ç–º–æ–¥–∑–∏
STOP_WORDS = {"–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ä–∞–±–æ—Ç–∞", "–∫–æ–º–∞–Ω–¥–∞"}
EMOJI_PATTERN = re.compile(r'[\U0001F300-\U0001F6FF]', re.UNICODE)  # –ü–æ–∏—Å–∫ —ç–º–æ–¥–∑–∏
MESSAGE_LIMIT = 5  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π

async def get_user_messages_count(chat_id: int, user_id: int):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    chat = await bot.get_chat(chat_id)
    members = await bot.get_chat_administrators(chat_id)

    for member in members:
        if member.user.id == user_id:
            return MESSAGE_LIMIT + 1  # –ù–µ –±–∞–Ω–∏–º –∞–¥–º–∏–Ω–æ–≤

    return user_messages.get((chat_id, user_id), 0)

@dp.message()
async def check_message(message: types.Message):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ —Å–ø–∞–º —ç–º–æ–¥–∑–∏ """
    if not message.text:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.lower()

    user_messages[(chat_id, user_id)] = user_messages.get((chat_id, user_id), 0) + 1
    msg_count = await get_user_messages_count(chat_id, user_id)

    if any(word in text for word in STOP_WORDS):
        if msg_count < MESSAGE_LIMIT:
            await bot.ban_chat_member(chat_id, user_id)
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
            return

    if len(EMOJI_PATTERN.findall(text)) > 5:
        if msg_count < MESSAGE_LIMIT:
            await bot.ban_chat_member(chat_id, user_id)
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º —ç–º–æ–¥–∑–∏.")
            return

async def set_webhook():
    """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ """
    webhook_info = await bot.get_webhook_info()
    
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_startup(app):
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è """
    await set_webhook()

app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, port=8080)  # –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
