import os
import re
import logging
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatPermissions
from aiogram.fsm.storage.memory import MemoryStorage

# üéØ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN", "7888371111:AAEdOKdeLH1fmZygscWXttr4vwwQGwrJNTk")  # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://telegrambot-tnm7.onrender.com/")  # –¢–≤–æ–π Render URL

if not TOKEN or "7888371111:AAEdOKdeLH1fmZygscWXttr4vwwQGwrJNTk" in TOKEN:
    raise ValueError("üö® –û—à–∏–±–∫–∞! –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# üî• –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîπ FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

# üîπ –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –ª–∏–º–∏—Ç —ç–º–æ–¥–∑–∏
STOP_WORDS = {"–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—Ä–∞–±–æ—Ç–∞", "–∫–æ–º–∞–Ω–¥–∞"}
EMOJI_PATTERN = re.compile(r'[\U0001F300-\U0001F6FF]', re.UNICODE)
MESSAGE_LIMIT = 5

# üîπ –•—Ä–∞–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = {}

async def get_user_messages_count(chat_id: int, user_id: int):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    chat = await bot.get_chat(chat_id)
    members = await bot.get_chat_administrators(chat_id)

    for member in members:
        if member.user.id == user_id:
            return MESSAGE_LIMIT + 1  # –ù–µ –±–∞–Ω–∏–º –∞–¥–º–∏–Ω–æ–≤

    return user_messages.get((chat_id, user_id), 0)

@dp.message()
async def check_message(message: types.Message):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ —Å–ø–∞–º —ç–º–æ–¥–∑–∏ """
    if not message.text:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.lower()

    user_messages[(chat_id, user_id)] = user_messages.get((chat_id, user_id), 0) + 1
    msg_count = await get_user_messages_count(chat_id, user_id)

    if any(word in text for word in STOP_WORDS):
        if msg_count < MESSAGE_LIMIT:
            await bot.ban_chat_member(chat_id, user_id)
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
            return

    if len(EMOJI_PATTERN.findall(text)) > 5:
        if msg_count < MESSAGE_LIMIT:
            await bot.ban_chat_member(chat_id, user_id)
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º —ç–º–æ–¥–∑–∏.")
            return

@app.post("/")
async def process_webhook(request: Request):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram """
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def on_startup():
    """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ """
    webhook_info = await bot.get_webhook_info()
    
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

if __name__ == "__main__":
    import uvicorn
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:8080")
    uvicorn.run(app, host="0.0.0.0", port=8080)